# Datadog-specific configuration profile

# Database Configuration with optimized connection pool
spring.datasource.url=${DATABASE_URL:jdbc:postgresql://localhost:5432/banking_system}
spring.datasource.username=banking_user
spring.datasource.password=banking_password

# HikariCP Performance Optimizations
spring.datasource.hikari.maximum-pool-size=20
spring.datasource.hikari.minimum-idle=5
spring.datasource.hikari.connection-timeout=20000
spring.datasource.hikari.idle-timeout=600000
spring.datasource.hikari.max-lifetime=1800000
spring.datasource.hikari.leak-detection-threshold=60000
spring.datasource.hikari.pool-name=BankingHikariPool

# JPA Performance Optimizations
spring.jpa.properties.hibernate.jdbc.batch_size=25
spring.jpa.properties.hibernate.order_inserts=true
spring.jpa.properties.hibernate.order_updates=true
spring.jpa.properties.hibernate.jdbc.batch_versioned_data=true
spring.jpa.properties.hibernate.generate_statistics=false
spring.jpa.properties.hibernate.cache.use_second_level_cache=false
spring.jpa.properties.hibernate.cache.use_query_cache=false

# Disable Spring Boot tracing to avoid conflicts (using Datadog native instead)
management.tracing.enabled=false
spring.application.name=banking-system

# Disable OpenTelemetry completely
otel.javaagent.enabled=false
otel.traces.exporter=none
otel.metrics.exporter=none
otel.logs.exporter=none

# Enhanced Datadog Configuration for APM
management.metrics.export.datadog.enabled=true
management.metrics.export.datadog.api-key=${DD_API_KEY:}
management.metrics.export.datadog.site=${DD_SITE:us5.datadoghq.com}
management.metrics.export.datadog.step=10s
management.metrics.export.datadog.connect-timeout=10s
management.metrics.export.datadog.read-timeout=30s
management.metrics.export.datadog.host-tag=${DD_HOST:localhost}
management.metrics.export.datadog.descriptions=true

# Datadog Service Configuration
datadog.service.name=${DD_SERVICE:banking-system}
datadog.service.version=${DD_VERSION:1.0.0}
datadog.environment=${DD_ENV:local}
datadog.tags=${DD_TAGS:team:backend,domain:banking,architecture:hexagonal}

# Enhanced metrics collection
management.metrics.enable.all=true
management.metrics.enable.jvm=true
management.metrics.enable.system=true
management.metrics.enable.process=true
management.metrics.enable.tomcat=true
management.metrics.enable.hikaricp=true

# Custom application metrics tags
management.metrics.tags.application=${DD_SERVICE:banking-system}
management.metrics.tags.environment=${DD_ENV:local}
management.metrics.tags.version=${DD_VERSION:1.0.0}
management.metrics.tags.architecture=hexagonal
management.metrics.tags.domain=banking

# Actuator endpoints for monitoring
management.endpoints.web.exposure.include=health,info,metrics,prometheus
management.endpoint.health.show-details=always
management.endpoint.metrics.enabled=true

# Application performance monitoring
performance.monitoring.enabled=true
performance.monitoring.slow-operation-threshold=1000
performance.monitoring.very-slow-operation-threshold=5000

# Kafka Producer Performance Configuration
spring.kafka.producer.acks=1
spring.kafka.producer.retries=0
spring.kafka.producer.batch-size=16384
spring.kafka.producer.linger-ms=5
spring.kafka.producer.buffer-memory=33554432
spring.kafka.producer.compression-type=lz4
spring.kafka.producer.request-timeout-ms=5000
spring.kafka.producer.delivery-timeout-ms=10000