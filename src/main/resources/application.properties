spring.application.name=BankingSystemApplication

# Database Configuration
spring.datasource.url=jdbc:postgresql://localhost:5432/banking_system
spring.datasource.username=banking_user
spring.datasource.password=banking_password
spring.datasource.driver-class-name=org.postgresql.Driver

# JPA Configuration
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=validate
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.jdbc.time_zone=UTC

# Flyway Configuration
spring.flyway.enabled=true
spring.flyway.baseline-on-migrate=true
spring.flyway.locations=classpath:db/migration

# Logging
logging.level.com.bank=DEBUG

# Swagger/OpenAPI Configuration
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.api-docs.path=/api-docs

# Kafka Configuration
spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.consumer.group-id=banking-group
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
spring.kafka.consumer.properties.spring.json.trusted.packages=com.bank.BankingSystemApplication.dto
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer

# Resilience4j Configuration
# Circuit Breaker
resilience4j.circuitbreaker.instances.banking-service.failure-rate-threshold=50
resilience4j.circuitbreaker.instances.banking-service.wait-duration-in-open-state=30s
resilience4j.circuitbreaker.instances.banking-service.sliding-window-size=10
resilience4j.circuitbreaker.instances.banking-service.minimum-number-of-calls=5
resilience4j.circuitbreaker.instances.banking-service.slow-call-rate-threshold=50
resilience4j.circuitbreaker.instances.banking-service.slow-call-duration-threshold=2s

# Retry
resilience4j.retry.instances.banking-service.max-attempts=3
resilience4j.retry.instances.banking-service.wait-duration=500ms
resilience4j.retry.instances.banking-service.retry-exceptions=java.lang.RuntimeException,java.util.concurrent.TimeoutException

# Rate Limiter
resilience4j.ratelimiter.instances.banking-api.limit-refresh-period=1m
resilience4j.ratelimiter.instances.banking-api.limit-for-period=100
resilience4j.ratelimiter.instances.banking-api.timeout-duration=3s

# Time Limiter
resilience4j.timelimiter.instances.banking-service.timeout-duration=5s
resilience4j.timelimiter.instances.banking-service.cancel-running-future=true

# Actuator Configuration
management.endpoints.web.exposure.include=health,info,metrics,prometheus,circuitbreakers,ratelimiters,retries,loggers
management.endpoint.health.show-details=always
management.health.circuitbreakers.enabled=true
management.health.ratelimiters.enabled=true
management.endpoint.metrics.enabled=true
management.endpoint.prometheus.enabled=true
management.metrics.export.prometheus.enabled=true

# Micrometer Configuration
management.metrics.enable.all=true
management.metrics.enable.jvm=true
management.metrics.enable.system=true
management.metrics.enable.process=true
management.metrics.enable.tomcat=true
management.metrics.enable.hikaricp=true
management.metrics.enable.kafka=true

# Custom metrics
management.metrics.tags.application=${APP_NAME:Banking System Application}
management.metrics.tags.environment=${APP_ENVIRONMENT:development}
management.metrics.tags.version=${APP_VERSION:1.0.0}

# Distributed Tracing Configuration
management.tracing.enabled=true
management.tracing.sampling.probability=${TRACING_SAMPLING_RATE:0.1}
management.zipkin.tracing.endpoint=${ZIPKIN_URL:http://localhost:9411/api/v2/spans}
spring.application.name=${APP_NAME:banking-system}

# Twelve-Factor App Configuration
# Factor I: Codebase - One codebase tracked in revision control, many deploys
# Factor II: Dependencies - Explicitly declare and isolate dependencies (via Maven)
# Factor III: Config - Store config in the environment
server.port=${SERVER_PORT:8080}
spring.profiles.active=${SPRING_PROFILES_ACTIVE:default}

# Factor IV: Backing services - Treat backing services as attached resources
spring.datasource.url=${DATABASE_URL:jdbc:postgresql://localhost:5432/banking_system}
spring.datasource.username=${DATABASE_USERNAME:banking_user}
spring.datasource.password=${DATABASE_PASSWORD:banking_password}
spring.kafka.bootstrap-servers=${KAFKA_SERVERS:localhost:9092}

# Factor V: Build, release, run - Strictly separate build and run stages
# Factor VI: Processes - Execute the app as one or more stateless processes
# Factor VII: Port binding - Export services via port binding
# Factor VIII: Concurrency - Scale out via the process model
server.tomcat.threads.max=${MAX_THREADS:200}
server.tomcat.threads.min-spare=${MIN_THREADS:10}

# Factor IX: Disposability - Maximize robustness with fast startup and graceful shutdown
server.shutdown=graceful
spring.lifecycle.timeout-per-shutdown-phase=30s

# Factor X: Dev/prod parity - Keep development, staging, and production as similar as possible
# Factor XI: Logs - Treat logs as event streams
logging.level.root=${LOG_LEVEL:INFO}
logging.pattern.console=%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n

# Factor XII: Admin processes - Run admin/management tasks as one-off processes
management.server.port=${MANAGEMENT_PORT:8081}
management.info.env.enabled=true

# Environment-specific configurations
app.name=${APP_NAME:Banking System Application}
app.version=${APP_VERSION:1.0.0}
app.environment=${APP_ENVIRONMENT:development}
